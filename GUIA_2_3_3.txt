


-- CASO 1

-- ACTIVAMOS LA SALIDA DE DBMS
SET SERVEROUTPUT ON;


-- CREAMOS TIPOS DE DATO VARRAY
CREATE OR REPLACE TYPE TIPO_PUNTOS_NORMALES IS VARRAY(1) OF NUMBER NOT NULL;

CREATE OR REPLACE TYPE TIPO_PUNTOS_EXTRA IS VARRAY(3) OF NUMBER NOT NULL;


-- CREAMOS UNA VARIABLE BIND PARA GESTIONAR LA FECHA DE PROCESO
VARIABLE b_fecha_proceso VARCHAR2(10);


-- OBJETIVO POBLAR LA TABLA DETALLE_PUNTOS_TARJETA_CATB
DECLARE

    -- DECLARAMOS UNA VARIABLE DE TIPO CURSOR QUE RECORRE LOS DATOS DE LOS CLIENTES
    CURSOR c1(p_fecha DATE) IS 
            SELECT c.numrun, c.dvrun, tc.nro_tarjeta, ttc.NRO_TRANSACCION,
                ttc.fecha_transaccion, ttt.COD_TPTRAN_TARJETA,
                ttt.nombre_tptran_tarjeta, ttc.monto_transaccion, tp.COD_TIPO_CLIENTE
                FROM CLIENTE C
                INNER JOIN TIPO_CLIENTE tp
                ON c.COD_TIPO_CLIENTE = tp.COD_TIPO_CLIENTE
                INNER JOIN TARJETA_CLIENTE TC
                ON C.numrun = TC.numrun
                INNER JOIN transaccion_tarjeta_cliente TTC
                ON TC.NRO_TARJETA = TTC.NRO_TARJETA
                INNER JOIN tipo_transaccion_tarjeta ttt
                ON ttc.cod_tptran_tarjeta = ttt.cod_tptran_tarjeta
                WHERE TO_CHAR(ttc.fecha_transaccion,'YYYY') = TO_CHAR(p_fecha,'YYYY') 
                ORDER BY ttc.fecha_transaccion ASC, c.numrun ASC, ttc.NRO_TRANSACCION ASC;


    CURSOR C2 IS 
        SELECT TO_CHAR(FECHA_TRANSACCION,'MM') AS "mes"
        FROM detalle_puntos_tarjeta_catb
        GROUP BY TO_CHAR(FECHA_TRANSACCION,'MM')
        ORDER BY TO_CHAR(FECHA_TRANSACCION,'MM') ASC;
        

    -- DECLARAMOS VARIABLES DE TIPO REGISTRO
    
    -- REGISTRO DEL CURSOR
    REG_C1 C1%ROWTYPE;
    REG_C2 C2%ROWTYPE;
    
    -- REGISTRO DE LA TABLA 
    REG_DETALLE_CATB DETALLE_PUNTOS_TARJETA_CATB%ROWTYPE;
    REG_RESUMEN RESUMEN_PUNTOS_TARJETA_CATB%ROWTYPE;
    
    -- DECLARAMOS LAS VARIABLES DE TIPO VARRAY 
    T_PUNTOS_NORMALES TIPO_PUNTOS_NORMALES DEFAULT TIPO_PUNTOS_NORMALES(250);
    
    T_PUNTOS_EXTRA TIPO_PUNTOS_EXTRA DEFAULT TIPO_PUNTOS_EXTRA(300,550,700);
    
BEGIN
    

    -- SOLICITAMOS INGRESAR LA FECHA DE PROCESO
    :b_fecha_proceso := ADD_MONTHS(TO_DATE('&fecha'),-12); -- LE RESTAMOS UN AÑO A LA FECHA DE PROCESO

    -- TRUNCAMOS LA TABLA EN TIEMPO DE EJECUCIÓN     
    EXECUTE IMMEDIATE 'TRUNCATE TABLE DETALLE_PUNTOS_TARJETA_CATB';
    EXECUTE IMMEDIATE 'TRUNCATE TABLE  RESUMEN_PUNTOS_TARJETA_CATB';
    COMMIT;
    
    -- INICIAMOS EL CURSOR PARA LA TABLA DETALLE
    FOR REG_C1 IN C1(:b_fecha_proceso) 
    LOOP
        BEGIN
            
            -- CÁLCULOS 
            
            REG_DETALLE_CATB.NUMRUN := REG_C1.numrun; 
            REG_DETALLE_CATB.DVRUN := REG_C1.dvrun; 
            REG_DETALLE_CATB.NRO_TARJETA := REG_C1.nro_tarjeta; 
            REG_DETALLE_CATB.NRO_TRANSACCION := REG_C1.nro_transaccion; 
            REG_DETALLE_CATB.FECHA_TRANSACCION := REG_C1.fecha_transaccion; 
            REG_DETALLE_CATB.TIPO_TRANSACCION := reg_c1.nombre_tptran_tarjeta; 
            REG_DETALLE_CATB.MONTO_TRANSACCION := reg_c1.monto_transaccion; 
            
            -- EVALUAR PUNTOS
    
            -- SISTEMA DE PUNTOS NORMALES
            
            
            -- 101 Compras Tiendas Retail o Asociadas
            -- 102 Avance en Efectivo
            -- 103 Súper Avance en Efectivo
            
            IF REG_C1.COD_TPTRAN_TARJETA IN(101,102,103) THEN 
            
                 -- Por cada $100.000 de monto que posea el cliente, se le sumarán 250 puntos all the best.
                REG_DETALLE_CATB.PUNTOS_ALLTHEBEST := TRUNC(REG_DETALLE_CATB.MONTO_TRANSACCION / 100000) * t_puntos_normales(1);
            
                -- SISTEMA DE PUNTOS EXTRA
                    
                -- VERIFICACIÓN
                -- Dueñas de casa y pensionados o de tercera edad.
                IF REG_C1.COD_TIPO_CLIENTE IN(30,40) THEN
                
                    IF  REG_C1.monto_transaccion between 500000 AND 700000 THEN
                        REG_DETALLE_CATB.PUNTOS_ALLTHEBEST := REG_DETALLE_CATB.PUNTOS_ALLTHEBEST  + TRUNC(REG_DETALLE_CATB.MONTO_TRANSACCION / 100000) * t_puntos_EXTRA(1);
                    ELSIF REG_C1.monto_transaccion between 700001 AND 900000 THEN
                        REG_DETALLE_CATB.PUNTOS_ALLTHEBEST := REG_DETALLE_CATB.PUNTOS_ALLTHEBEST  + TRUNC(REG_DETALLE_CATB.MONTO_TRANSACCION / 100000) * t_puntos_EXTRA(2);
                    ELSIF REG_C1.monto_transaccion > 900000 THEN
                        REG_DETALLE_CATB.PUNTOS_ALLTHEBEST := REG_DETALLE_CATB.PUNTOS_ALLTHEBEST  + TRUNC(REG_DETALLE_CATB.MONTO_TRANSACCION / 100000) * t_puntos_EXTRA(3);
                    END IF;
                
                END IF; 
                
            END IF;    
            
            -- OBJETIVO POBLAR LA TABLA DETALLE_PUNTOS_TARJETA_CATB
            
            INSERT INTO detalle_puntos_tarjeta_catb VALUES REG_DETALLE_CATB;
            COMMIT;
            
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('Error en el proceso del cursor' || SQLERRM);
        END;
    END LOOP;
    
    
    -- INICIAMOS EL CURSOR PARA LA TABLA RESUMEN
    FOR REG_C2 IN C2
    LOOP
        BEGIN   
            -- CÁLCULOS
            
            REG_RESUMEN.MES_ANNO:= REG_C2."mes" ||TO_CHAR(TO_DATE(:B_FECHA_PROCESO),'YYYY');          
            REG_RESUMEN.MONTO_TOTAL_COMPRAS := 0;
            REG_RESUMEN.TOTAL_PUNTOS_COMPRAS := 0;
            REG_RESUMEN.MONTO_TOTAL_AVANCES := 0;
            REG_RESUMEN.TOTAL_PUNTOS_AVANCES := 0;
            REG_RESUMEN.MONTO_TOTAL_SAVANCES:= 0;
            REG_RESUMEN.TOTAL_PUNTOS_SAVANCES:= 0;            


            -- MONTO COMPRAS
            BEGIN
                SELECT SUM(MONTO_TRANSACCION) AS "monto", SUM(PUNTOS_ALLTHEBEST) INTO REG_RESUMEN.MONTO_TOTAL_COMPRAS, REG_RESUMEN.TOTAL_PUNTOS_COMPRAS
                FROM DETALLE_PUNTOS_TARJETA_CATB
                GROUP BY TO_CHAR(FECHA_TRANSACCION, 'MM'), TIPO_TRANSACCION
                HAVING TO_CHAR(FECHA_TRANSACCION, 'MM') = reg_c2."mes" AND TIPO_TRANSACCION = 'Compras Tiendas Retail o Asociadas';            
            EXCEPTION
                WHEN OTHERS THEN
                    NULL;
            END;
            
            -- MONTO AVANCES
            BEGIN
                SELECT SUM(MONTO_TRANSACCION) AS "monto", SUM(PUNTOS_ALLTHEBEST) INTO REG_RESUMEN.MONTO_TOTAL_AVANCES , REG_RESUMEN.TOTAL_PUNTOS_AVANCES
                FROM DETALLE_PUNTOS_TARJETA_CATB
                GROUP BY TO_CHAR(FECHA_TRANSACCION, 'MM'), TIPO_TRANSACCION
                HAVING TO_CHAR(FECHA_TRANSACCION, 'MM') = reg_c2."mes" AND TIPO_TRANSACCION = 'Avance en Efectivo';            
            EXCEPTION
                WHEN OTHERS THEN
                    NULL;
            END;
            
            -- MONTO SUPER AVANCES
            BEGIN
                SELECT SUM(MONTO_TRANSACCION) AS "monto", SUM(PUNTOS_ALLTHEBEST) INTO REG_RESUMEN.MONTO_TOTAL_SAVANCES, REG_RESUMEN.TOTAL_PUNTOS_SAVANCES
                FROM DETALLE_PUNTOS_TARJETA_CATB
                GROUP BY TO_CHAR(FECHA_TRANSACCION, 'MM'), TIPO_TRANSACCION
                HAVING TO_CHAR(FECHA_TRANSACCION, 'MM') = reg_c2."mes" AND TIPO_TRANSACCION = 'Súper Avance en Efectivo';            
            EXCEPTION
                WHEN OTHERS THEN
                    NULL;
            END;            

            -- OBJETIVO
            INSERT INTO RESUMEN_PUNTOS_TARJETA_CATB VALUES REG_RESUMEN;
            COMMIT;
        
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('ERROR EN EL 2DO CURSOR' || SQLERRM);
        END;
    END LOOP;
    

END;

