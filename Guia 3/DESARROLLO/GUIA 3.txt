-- GUIA N° 3

-----------------------------------------------
-- CASO 1
-----------------------------------------------

-- ACTIVAMOS SALIDA DE DBMS
-----------------------------------------------
SET SERVEROUTPUT ON;


-- VARIABLES BIND
-----------------------------------------------

VARIABLE b_fecha_proceso VARCHAR2(10);

-- VARRAY PUNTOS 
-----------------------------------------------

CREATE OR REPLACE TYPE TIPO_PUNTOS IS VARRAY(4) OF NUMBER(8) NOT NULL;
/

DECLARE
    -- CURSOR 
    CURSOR C1(p_fecha DATE) IS 
    SELECT C.NRO_CLIENTE, 
    TO_CHAR(C.NUMRUN,'999G999G999') || '-'||DVRUN AS "run",
    C.PNOMBRE || ' ' || C.SNOMBRE || ' ' || C.APPATERNO || ' ' || C.APMATERNO as "nombre",
    c.cod_tipo_cliente, SUM(cc.monto_solicitado)
    FROM CLIENTE C
    INNER JOIN CREDITO_CLIENTE CC
    ON C.NRO_CLIENTE = CC.NRO_CLIENTE
    WHERE TO_CHAR(FECHA_OTORGA_CRED,'YYYY') = TO_CHAR(p_fecha,'YYYY')
    GROUP BY NRO_CLIENTE,TO_CHAR(C.NUMRUN,'999G999G999') || '-'||DVRUN,
    C.PNOMBRE || ' ' || C.SNOMBRE || ' ' || C.APPATERNO || ' ' || C.APMATERNO,
    c.cod_tipo_cliente;
    
    -- REGISTROS
    REG_C1 C1%ROWTYPE;
    REG_CLIENTE CLIENTE_TODOSUMA%ROWTYPE;
    
    -- VARRAY
    t_puntos TIPO_PUNTOS := TIPO_PUNTOS(100,300,550,1200);

BEGIN
    
    :b_fecha_proceso := ADD_MONTHS(TO_DATE('&fecha'),-12);
    
    -- SQL DINÁMICO
    EXECUTE IMMEDIATE 'TRUNCATE TABLE CLIENTE_TODOSUMA';
    COMMIT;
    
    FOR REG_C1 IN C1(:b_fecha_proceso)
    LOOP
        BEGIN
            
            IF  REG_C1.NRO_CLIENTE IN(67,85,62,41,34) THEN
                -- Cálculos
                REG_CLIENTE.NRO_CLIENTE := REG_C1.NRO_CLIENTE;
                REG_CLIENTE.RUN_CLIENTE := REG_C1."run";
                REG_CLIENTE.NOMBRE_CLIENTE := REG_C1."nombre";
                
                SELECT NOMBRE_TIPO_CLIENTE INTO REG_CLIENTE.TIPO_CLIENTE 
                FROM TIPO_CLIENTE WHERE COD_TIPO_CLIENTE = REG_C1.COD_TIPO_CLIENTE;
                
                REG_CLIENTE.MONTO_SOLIC_CREDITOS := REG_C1.MONTO_SOLICITADO;
                
                
                
                -- PESOS NORMALES
                REG_CLIENTE.MONTO_PESOS_TODOSUMA := TRUNC(REG_CLIENTE.MONTO_SOLIC_CREDITOS / 100000) * t_puntos(4);
                
                DBMS_OUTPUT.PUT_LINE(REG_CLIENTE.MONTO_PESOS_TODOSUMA);
                -- ESTRUCTURA DE CONTROL SUMA DE PESOS EXTRA
                
                IF REG_CLIENTE.MONTO_SOLIC_CREDITOS < 1000000 THEN
                    -- 100 POR CADA 100000
                    REG_CLIENTE.MONTO_PESOS_TODOSUMA := TRUNC(REG_CLIENTE.MONTO_SOLIC_CREDITOS / 100000) * t_puntos(1);
                ELSIF REG_CLIENTE.MONTO_SOLIC_CREDITOS BETWEEN 1000001 AND 3000000 THEN
                    -- 300 POR CADA 100000
                    REG_CLIENTE.MONTO_PESOS_TODOSUMA := TRUNC(REG_CLIENTE.MONTO_SOLIC_CREDITOS / 100000) * t_puntos(2);
                ELSIF REG_CLIENTE.MONTO_SOLIC_CREDITOS > 3000000 THEN
                    -- 550 POR CADA 100000
                    REG_CLIENTE.MONTO_PESOS_TODOSUMA := TRUNC(REG_CLIENTE.MONTO_SOLIC_CREDITOS / 100000) * t_puntos(3);
                END IF;
                

                -- Objetivo
                INSERT INTO CLIENTE_TODOSUMA VALUES REG_CLIENTE;
                COMMIT;
            END IF;
           
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('Error con el cursor ' || SQLERRM);
        END;
    END LOOP;
END;
/



-- CASO 2
---------------------------------------------------------------

DROP TABLE TRAMO_GIFCARD;

CREATE TABLE TRAMO_GIFCARD 
(
    ID_TRAMO NUMBER(2) PRIMARY KEY,
    MONTO_INF NUMBER(10) NOT NULL,
    MONTO_SUP NUMBER(10) NOT NULL,
    MONTO_GIF NUMBER(8) NOT NULL
);

INSERT INTO tramo_gifcard VALUES(1,0,900000,0);
INSERT INTO tramo_gifcard VALUES(2,900001,2000000,50000);
INSERT INTO tramo_gifcard VALUES(3,2000001,5000000,100000);
INSERT INTO tramo_gifcard VALUES(4,5000001,8000000,200000);
INSERT INTO tramo_gifcard VALUES(5,8000001,15000000,300000);

COMMIT;

DECLARE 
    CURSOR C1 IS 
        SELECT C.NRO_CLIENTE, 
        TO_CHAR(C.NUMRUN,'999G999G999') || '-'||DVRUN AS "run",
        INITCAP(C.PNOMBRE || ' ' || C.SNOMBRE || ' ' || C.APPATERNO || ' ' || C.APMATERNO) as "nombre",
        C.COD_PROF_OFIC, NVL(P.MONTO_TOTAL_AHORRADO,0) AS "monto", c.fecha_nacimiento
        FROM CLIENTE C
        LEFT JOIN PRODUCTO_INVERSION_CLIENTE P
        ON C.NRO_CLIENTE = P.NRO_CLIENTE;


    -- REGISTROS
    REG_C1 C1%ROWTYPE;
    REG_RESUMEN CUMPLEANNO_CLIENTE%ROWTYPE;

    -- VARIABLES
    v_valida number(1) DEFAULT 0;

BEGIN

    -- FECHA PROCESO
    :b_fecha_proceso := TO_DATE('&fecha');

    -- SQL DINÁMICO
    EXECUTE IMMEDIATE 'TRUNCATE TABLE CUMPLEANNO_CLIENTE';
    COMMIT;

    FOR REG_C1 IN C1 
    LOOP
        BEGIN

            IF  REG_C1.NRO_CLIENTE IN(109,86,110,19,105) THEN
                -- Cálculos
                REG_RESUMEN.NRO_CLIENTE  := REG_C1.NRO_CLIENTE;
                REG_RESUMEN.RUN_CLIENTE  := REG_C1."run";
                REG_RESUMEN.NOMBRE_CLIENTE  := REG_C1."nombre";

                SELECT NOMBRE_PROF_OFIC 
                INTO  REG_RESUMEN.PROFESION_OFICIO  
                FROM PROFESION_OFICIO 
                WHERE cod_prof_ofic = REG_C1.cod_prof_ofic;


                REG_RESUMEN.DIA_CUMPLEANO := TO_CHAR(REG_C1.FECHA_NACIMIENTO,'DD') || ' de ' || INITCAP(TO_CHAR(REG_C1.FECHA_NACIMIENTO,'MONTH'));
                v_valida  := CASE  TO_CHAR(REG_C1.FECHA_NACIMIENTO,'MM')
                                    WHEN TO_NUMBER(TO_CHAR(to_date(:b_fecha_proceso),'MM')) + 1 THEN 1
                                    else 0
                                    END;

                IF v_valida = 1 THEN

                    -- TABLA DE TRAMO
                    SELECT MONTO_GIF INTO REG_RESUMEN.MONTO_GIFCARD FROM TRAMO_GIFCARD WHERE REG_C1."monto" BETWEEN MONTO_INF AND MONTO_SUP;
                    REG_RESUMEN.OBSERVACION := NULL;
                ELSE 
                    REG_RESUMEN.OBSERVACION := 'El cliente no está de cumpleaños en el mes procesado.';
                    REG_RESUMEN.MONTO_GIFCARD := NULL;    
                END IF;

                

                -- Objetivo
                INSERT INTO CUMPLEANNO_CLIENTE VALUES REG_RESUMEN;
                COMMIT;
            END IF;
        EXCEPTION 
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('Error en el cursor' || SQLERRM);
        END;
    END LOOP;
END;
/



-- CASO 3
----------------------------------------------

-- CREAMOS UN RESPALDO DE LA TABLA CUOTA_CREDITO_CLIENTE

DROP TABLE CUOTA_BK;
CREATE TABLE CUOTA_BK AS SELECT * FROM CUOTA_CREDITO_CLIENTE;
COMMIT;

CREATE OR REPLACE PROCEDURE SP_UPDATE_CUOTA(v_nro_solicitud in number,v_nro_cliente IN NUMBER,v_cantidad IN NUMBER) IS

    -- REGISTROS
    reg_resumen CUOTA_BK%ROWTYPE;
    
    -- VARIABLE QUE ITERA POR CADA PROCESO
    v_contador NUMBER(2) DEFAULT 0;
    
    -- VARIABLE QUE GUARDA EL PORCENTAJE SEGÚN SU TARJETA DE CRÉDITO
    v_pct_cred NUMBER(8,8);
    
BEGIN 
        
        -- ASIGNAMOS LA CANTIDAD DE CUOTAS A POSTERGAR
        FOR x IN 1..v_cantidad
        LOOP
            BEGIN
                
                DBMS_OUTPUT.PUT_LINE(x);
                
                -- CÁLCULOS
                
                BEGIN
                SELECT ccc.NRO_SOLIC_CREDITO, 
                ccc.NRO_CUOTA, ccc.FECHA_VENC_CUOTA, ccc.VALOR_CUOTA, 
                ccc.FECHA_PAGO_CUOTA, ccc.MONTO_PAGADO, ccc.SALDO_POR_PAGAR, ccc.COD_FORMA_PAGO 
                INTO REG_RESUMEN
                FROM CUOTA_BK CCC
                INNER JOIN CREDITO_CLIENTE CC
                ON CC.NRO_SOLIC_CREDITO = CCC.NRO_SOLIC_CREDITO 
                WHERE CC.NRO_SOLIC_CREDITO = v_nro_solicitud 
                AND CC.NRO_CLIENTE = v_nro_cliente
                ORDER BY NRO_CUOTA DESC
                FETCH FIRST 1 ROWS ONLY;
                
                EXCEPTION WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('SE CAE AQUI' || sqlerrm);
                END;
                -- VALIDAMOS SI ES LA PRIMERA CUOTA EN LA ITERACION
                IF   x = 1 THEN
                
                    SELECT CASE cod_credito 
                                    WHEN 1 THEN 0.005
                                    WHEN 2 THEN 0.01
                                    WHEN 3 THEN 0.02
                                    END 
                                    INTO v_pct_cred 
                    FROM CREDITO_CLIENTE 
                    WHERE NRO_CLIENTE = v_nro_cliente
                    AND nro_solic_credito = v_nro_solicitud;
                    
                    -- SI ES 1 AGREGAMOS EL INTERÉS AL VALOR CUOTA
                    reg_resumen.valor_cuota := reg_resumen.valor_cuota + ROUND(reg_resumen.valor_cuota * v_pct_cred,0);
                    
                END IF;
                
                
                -- NRO CUOTA
                reg_resumen.NRO_CUOTA := reg_resumen.NRO_CUOTA + 1;
                
                -- FECHA DE VENCIMIENTO DE LA CUOTA 
                REG_RESUMEN.FECHA_VENC_CUOTA := ADD_MONTHS(REG_RESUMEN.FECHA_VENC_CUOTA,1);
                
                -- FECHA PAGO CUOTA
                REG_RESUMEN.FECHA_PAGO_CUOTA := NULL;
                
                -- MONTO PAGADO
                REG_RESUMEN.MONTO_PAGADO := NULL; 
                
                -- SALDO POR PAGAR 
                REG_RESUMEN.SALDO_POR_PAGAR := NULL;
                
                --COD FORMA PAGO
                REG_RESUMEN.COD_FORMA_PAGO  := NULL;
                
                -- OBJETIVO
                
                --dbms_output.put_line(REG_RESUMEN.NRO_CUOTA);
                INSERT INTO cuota_bk VALUES REG_RESUMEN;
                COMMIT;
                
            EXCEPTION
                WHEN OTHERS THEN
                    DBMS_OUTPUT.PUT_LINE('Error en el cursor =( : ' || SQLERRM);
            END;
        END LOOP;
        
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error =( : ' || SQLERRM);
END SP_UPDATE_CUOTA;
/


BEGIN
    -- VALORES 3400 , 67 , 1
    SP_UPDATE_CUOTA(3004, 67, 1);
    -- VALORES 2400 , 13 , 1
    SP_UPDATE_CUOTA(2004, 13, 1);
    -- VALORES 2001 , 5 , 2
    SP_UPDATE_CUOTA(2001, 5, 2);

END;
/


SELECT * FROM CUOTA_BK
WHERE nro_solic_credito = 2001
ORDER BY NRO_CUOTA DESC
FETCH FIRST 2 ROWS ONLY;



SELECT * FROM CUOTA_BK
WHERE nro_solic_credito = 2004
ORDER BY NRO_CUOTA DESC
FETCH FIRST 1 ROWS ONLY;


SELECT * FROM CUOTA_BK
WHERE nro_solic_credito = 3004
ORDER BY NRO_CUOTA DESC
FETCH FIRST 1 ROWS ONLY;
