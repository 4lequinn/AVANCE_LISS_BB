
-------------------------------
-- CASO 1
-------------------------------

--ACTIVAMOS LA SALIDA DE DBMS
SET SERVEROUTPUT ON; 
SET AUTOPRINT ON;

VARIABLE b_fecha_proceso VARCHAR2(10);

EXECUTE :b_fecha_proceso := '10/10/2020';

DECLARE 
    -- CURSOR
    CURSOR c1 IS 
        SELECT id_emp, numrun_emp, dvrun_emp,
            pnombre_emp|| ' '|| snombre_emp || ' ' || appaterno_emp || ' ' || apmaterno_emp AS "nombre",
            id_comuna, sueldo_base
        FROM empleado;

    -- REGISTRO
    reg_proy proy_movilizacion%rowtype;
    reg_c1 c1%rowtype;
BEGIN

    -- TRUNCAR LA TABLA EN TIEMPO DE EJECUCIÓN
    EXECUTE IMMEDIATE 'TRUNCATE TABLE PROY_MOVILIZACION';
    COMMIT;
    
    FOR reg_c1 IN c1 
    LOOP
        BEGIN
            -- CÁLCULOS
            reg_proy.anno_proceso := to_char(TO_DATE(:b_fecha_proceso),'YYYY');
            reg_proy.id_emp := reg_c1.id_emp;
            reg_proy.numrun_emp := reg_c1.numrun_emp;
            reg_proy.dvrun_emp := reg_c1.dvrun_emp;
            reg_proy.nombre_empleado := reg_c1."nombre";

            SELECT nombre_comuna
            INTO  reg_proy.nombre_comuna
            FROM comuna
            WHERE id_comuna = reg_c1.id_comuna;
           
            reg_proy.sueldo_base := reg_c1.sueldo_base;
            
            reg_proy.valor_movil_extra := 0;

                    /*
            María Pinto 117
            Curacaví 118
            Talagante 119
            El Monte 120
            Buin 121
            */
            IF reg_c1.id_comuna = 117 THEN
                reg_proy.valor_movil_extra := 20000;
            ELSIF reg_c1.id_comuna = 118 THEN
                reg_proy.valor_movil_extra := 25000;
            ELSIF reg_c1.id_comuna = 119 THEN
                reg_proy.valor_movil_extra := 30000;
            ELSIF reg_c1.id_comuna = 120 THEN
                reg_proy.valor_movil_extra := 35000;
            ELSIF reg_c1.id_comuna = 121 THEN
                reg_proy.valor_movil_extra := 40000;
            END IF;

              -- PORCENTAJE
            reg_proy.porc_movil_normal := TRUNC(reg_proy.sueldo_base / 100000) ;
            reg_proy.valor_movil_normal := round(reg_proy.sueldo_base * (reg_proy.porc_movil_normal / 100),0); 
            reg_proy.valor_total_movil := reg_proy.valor_movil_normal + reg_proy.valor_movil_extra;
            
            --OBJETIVO
            
            INSERT INTO proy_movilizacion VALUES reg_proy;
            COMMIT;
        EXCEPTION
            WHEN OTHERS THEN
                dbms_output.put_line('Error en el cursor' || sqlerrm);
        END;
    END LOOP; 

END;
/

---------------------------------------------------------------
-- CASO 2
---------------------------------------------------------------

DECLARE 
    CURSOR c1 IS 
        SELECT id_emp, numrun_emp, 
        dvrun_emp, pnombre_emp ||' '|| snombre_emp|| ' '|| appaterno_emp|| ' '||
        apmaterno_emp AS "nombre", 
        -- NOMBRE USUARIO
        LOWER(substr(nombre_estado_civil,0,1)) || substr(pnombre_emp,0,3)  || LENGTH(pnombre_emp) || '*' || substr(sueldo_base,-1,1) || dvrun_emp  ||
        TRUNC(months_between(sysdate,fecha_contrato)/12) AS "nombre_usuario",
        -- CONTRASENIA
        substr(numrun_emp,3,1) || to_number(to_char(fecha_nac,'YYYY') ) + 2 ||substr((sueldo_base - 1),-3,3) ||
        
        CASE ec.id_estado_civil
            WHEN 60 THEN LOWER(substr(appaterno_emp,0,2))
            WHEN 10 THEN LOWER(substr(appaterno_emp,0,2)) -- OK
            WHEN 20 THEN LOWER(substr(appaterno_emp,0,1) ||  substr(appaterno_emp,-1,1))-- 
            WHEN 30 THEN LOWER(substr(appaterno_emp,0,1) ||  substr(appaterno_emp,-1,1))-- OK
            WHEN 40 THEN LOWER(substr(appaterno_emp,-3,2)) -- OK 
            WHEN 50 THEN LOWER(substr(appaterno_emp,-2,2))  
            ELSE
                'X'
        END || id_emp AS "clave_usuario",
        -- ANIOS
        TRUNC(months_between(sysdate,fecha_contrato)/12) AS "anios"
        FROM empleado E
        INNER JOIN estado_civil ec
        ON E.id_estado_civil = ec.id_estado_civil;
        
        -- Registros
        reg_c1 c1%rowtype;
        reg_usuario usuario_clave%rowtype;
        
BEGIN

    -- TRUNCAR LA TABLA EN TIEMPO DE EJECUCION
    EXECUTE IMMEDIATE 'TRUNCATE TABLE USUARIO_CLAVE';    
    
    :b_fecha_proceso := '&dia' ||'/'||'&mes'||'/'||'&anio';

    FOR reg_c1 IN c1
    LOOP
        -- Cálculos
        reg_usuario.id_emp := reg_c1.id_emp;
        reg_usuario.numrun_emp := reg_c1.numrun_emp;
        reg_usuario.dvrun_emp := reg_c1.dvrun_emp;
        reg_usuario.nombre_empleado := reg_c1."nombre";
        reg_usuario.nombre_usuario := reg_c1."nombre_usuario";
        reg_usuario.clave_usuario := reg_c1."clave_usuario" || to_char(TO_DATE(:b_fecha_proceso),'MMYYYY');
        
        IF to_number(reg_c1."anios") < 10 THEN
        -- NOMBRE USUARIO
             reg_usuario.nombre_usuario := reg_usuario.nombre_usuario || 'X';
        END IF;
        
        -- Objetivo
        INSERT INTO usuario_clave VALUES reg_usuario;
        COMMIT;
    END LOOP;
END;
/

--------------------------------------
-- CASO 3 
--------------------------------------

/*

    VALOR DEL PORCENTAJE 22.5

*/
-- POBLAR LA TABLA HIST_ARRIENDO_ANUAL_CAMION


-- PERMITE IMPRIMIR AUTOMÁTICAMENTE EL VALOR DE LA VARIABLE BIND
SET AUTOPRINT ON;

-- SALIDA DE DBMS
SET SERVEROUTPUT ON;

-- VARIABLE BIND
VARIABLE b_fecha_proceso VARCHAR2(10);

EXEC :b_fecha_proceso := '01/01/2022';

-- REALIZAMOS UN RESPALDO DE LA TABLA CAMIÓN
DROP TABLE camion_bk;
CREATE TABLE camion_bk AS SELECT * FROM camion;

DECLARE
    
    -- CURSOR
    CURSOR c_camion IS
        SELECT id_camion, nro_patente, 
        valor_arriendo_dia, valor_garantia_dia
        FROM camion;
    
    -- REGISTROS
    reg_c_camion c_camion%rowtype;
    reg_resumen hist_arriendo_anual_camion%rowtype;
    
    -- SQL DINÁMICO
    v_sql VARCHAR2(200);
    
    -- ACTUALIZAR VALOR ARRIENDO DIA Y VALOR GARANTIA DIA
    TYPE tipo_valor IS VARRAY(2) OF NUMBER(10) ;
    
    v_arreglo_valor tipo_valor :=  tipo_valor(0,0);
    
    -- PORCENTAJE
    v_pct_arriendo NUMBER(5,3) DEFAULT &porcentaje;
    
BEGIN
    
    -- RESTAMOS UN AÑO A LA FECHA DE PROCESO PARA PROCESAR LOS ARRIENDOS DEL AÑO PASADO
    :b_fecha_proceso := add_months(TO_DATE(:b_fecha_proceso),-12); 

    
    -- TRUNCAMIENTO EN TIEMPO DE EJECUCIÓN
    EXECUTE IMMEDIATE 'TRUNCATE TABLE HIST_ARRIENDO_ANUAL_CAMION';
    COMMIT;

    FOR reg_c_camion IN c_camion 
    LOOP
        BEGIN
    
            -- CÁLCULOS
            
            reg_resumen.anno_proceso := to_number(to_char(TO_DATE(:b_fecha_proceso),'YYYY'));
            reg_resumen.id_camion := reg_c_camion.id_camion;
            reg_resumen.nro_patente := reg_c_camion.nro_patente;
            reg_resumen.valor_arriendo_dia := reg_c_camion.valor_arriendo_dia;
            reg_resumen.valor_garactia_dia := reg_c_camion.valor_garantia_dia;
    
            
            -- CALCULAR EL TOTAL DE ARRIENDOS
            BEGIN
                v_sql := 'SELECT COUNT(ID_ARRIENDO)
                FROM ARRIENDO_CAMION
                WHERE TO_CHAR(FECHA_INI_ARRIENDO, ''YYYY'') = TO_CHAR(:1,''YYYY'') AND ID_CAMION = :2
                GROUP BY id_camion';
                
                EXECUTE IMMEDIATE v_sql 
                INTO reg_resumen.total_veces_arrendado
                USING TO_DATE(:b_fecha_proceso), reg_resumen.id_camion;
                
                
            EXCEPTION
                WHEN OTHERS THEN
                    dbms_output.put_line('No se han solicitado arriendos para este camión.');
                    reg_resumen.total_veces_arrendado:= 0;
            END;
            
            -- SÓLO CONSIDERAMOS LOS CAMIONES QUE FUERON ARRENDADOS MENOS DE 4 VECES AL AÑO
            IF reg_resumen.total_veces_arrendado < 4 THEN
                
                -- CÁCULOS DE CAMIÓN
                v_pct_arriendo := v_pct_arriendo / 100;   
                v_arreglo_valor(1) := reg_resumen.valor_arriendo_dia - round(reg_resumen.valor_arriendo_dia * v_pct_arriendo,0);
                v_arreglo_valor(2) := reg_resumen.valor_garactia_dia - round(reg_resumen.valor_garactia_dia * v_pct_arriendo,0);
  
                -- ACTUALIZAR LA TABLA CAMIÓN
            
                UPDATE camion_bk SET valor_arriendo_dia = v_arreglo_valor(1), valor_garantia_dia = v_arreglo_valor(2) 
                WHERE id_camion = reg_resumen.id_camion;
                
            END IF;
            
            -- OBJETIVO
            
            -- INSERTAR EN LA TABLA HISTORIAL
            INSERT INTO hist_arriendo_anual_camion VALUES reg_resumen;
            
             
            COMMIT;
            
        EXCEPTION
            WHEN OTHERS THEN
                dbms_output.put_line('Error en el cursor' || sqlerrm);
        END;
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        dbms_output.put_line('Error en el bloque PLSQL' || sqlerrm);
END;
/

SELECT * FROM camion_bk;


---------------------------------------------------------------
-- CASO 4
---------------------------------------------------------------

-- AÑO DE PROCESO DEBE SER 2020
-- PORCENTAJE A INGRESAR 30%
-- SIMULAR GANANCIAS DE 200.000.000

DROP TABLE tramo_sueldo_base;

CREATE TABLE tramo_sueldo_base (
    id_tramo NUMBER(1) PRIMARY KEY,
    tramo_inf NUMBER(7) NOT NULL,
    tramo_sup NUMBER(7) NOT NULL,
    pct_bonif NUMBER(2) NOT NULL
);

-- INSERT DE LOS DATOS DE LA TABLA DE TRAMOS 
INSERT INTO tramo_sueldo_base VALUES (1,320000,600000,35);
INSERT INTO tramo_sueldo_base VALUES (2,600001,1300000,25);
INSERT INTO tramo_sueldo_base VALUES (3,1300001,1800000,20);
INSERT INTO tramo_sueldo_base VALUES (4,1800001,2200000,15);
INSERT INTO tramo_sueldo_base VALUES (5,2200001,9000000,5);
COMMIT;

DECLARE 
    -- DECLARAMOS EL CURSOR
    CURSOR c1 IS
        SELECT id_emp, sueldo_base 
        FROM empleado;

    CURSOR c2 IS
        SELECT id_emp, sueldo_base 
        FROM empleado;
    
    -- REGISTROS
    reg_resumen bonif_por_utilidad%rowtype;
    reg_c1 c1%rowtype;

    -- PORCENTAJE
    v_pct NUMBER(5,3) DEFAULT &porcentaje;

    -- GANANCIAS DEL AÑO
    v_ganancia_anual NUMBER(9) DEFAULT &ganancia_anual;

    -- ARREGLO CON LAS GANANCIAS DIVIDIDAS EN TRAMOS
    TYPE tipo_ganancias IS VARRAY(5) OF NUMBER(9);

    v_arreglo_ganancias tipo_ganancias := tipo_ganancias(0,0,0,0,0);

    -- VARIABLES PARA CONTAR A LOS EMPLEADO POR TRAMO
    v_tramo NUMBER(1);
    
    TYPE tipo_contador IS VARRAY(5) OF NUMBER;
    
    v_contador tipo_contador := tipo_contador(0,0,0,0,0);
    
    -- Validador de distribuición de ganancias (FLAG)
    v_valida BOOLEAN DEFAULT FALSE;

BEGIN
    
    :b_fecha_proceso := TO_DATE('&fecha');
    v_pct := v_pct / 100;

    -- OBTENEMOS EL 30% DE LAS GANANCIAS ANUALES PARA DISTRIBUIRLAS
    v_ganancia_anual := round(v_ganancia_anual * v_pct,0);

    SELECT pct_bonif / 100 * v_ganancia_anual INTO v_arreglo_ganancias(1)
    FROM tramo_sueldo_base 
    WHERE id_tramo = 1;

    SELECT pct_bonif / 100 * v_ganancia_anual INTO v_arreglo_ganancias(2)
    FROM tramo_sueldo_base 
    WHERE id_tramo = 2;

    SELECT pct_bonif / 100 * v_ganancia_anual INTO v_arreglo_ganancias(3)
    FROM tramo_sueldo_base 
    WHERE id_tramo = 3;

    SELECT pct_bonif / 100 * v_ganancia_anual INTO v_arreglo_ganancias(4)
    FROM tramo_sueldo_base 
    WHERE id_tramo = 4;

    SELECT pct_bonif / 100 * v_ganancia_anual INTO v_arreglo_ganancias(5)
    FROM tramo_sueldo_base 
    WHERE id_tramo = 5;

    -- TRUNCADO EN TIEMPO DE EJECUCIÓN
    EXECUTE IMMEDIATE 'TRUNCATE TABLE BONIF_POR_UTILIDAD';
    COMMIT;

    FOR reg_c1 IN c1 
    LOOP
        BEGIN
            
            -- Cálculos
            
            reg_resumen.anno_proceso := to_number(to_char(TO_DATE(:b_fecha_proceso),'YYYY'));
            reg_resumen.id_emp := reg_c1.id_emp;
            reg_resumen.sueldo_base := reg_c1.sueldo_base;

            -- INICIAMOS OTRO CURSOR QUE CUENTE A LOS EMPLEADOS POR TRAMO
            
            FOR X IN c2
            LOOP
                BEGIN
                    SELECT id_tramo 
                    INTO v_tramo 
                    FROM tramo_sueldo_base WHERE X.sueldo_base BETWEEN tramo_inf AND tramo_sup;

                    IF v_tramo = 1 THEN
                    v_contador(1)  := v_contador(1) + 1;
                    ELSIF  v_tramo = 2 THEN 
                    v_contador(2) := v_contador(2) + 1;
                    ELSIF  v_tramo = 3 THEN  
                    v_contador(3) := v_contador(3) + 1;
                    ELSIF  v_tramo = 4 THEN 
                    v_contador(4) := v_contador(4) + 1;
                    ELSIF  v_tramo = 5 THEN 
                    v_contador(5) := v_contador(5) + 1;
                    END IF;

                EXCEPTION   
                WHEN OTHERS THEN    
                    dbms_output.put_line('Error en el 2do cursor');
                END;
            END LOOP;

            IF v_valida = FALSE THEN
                -- DISTRIBUIMOS LAS GANANCIAS
                v_arreglo_ganancias(1) := v_arreglo_ganancias(1) / v_contador(1);
                v_arreglo_ganancias(2) := v_arreglo_ganancias(2) / v_contador(2);
                v_arreglo_ganancias(3) := v_arreglo_ganancias(3) / v_contador(3);
                v_arreglo_ganancias(4) := v_arreglo_ganancias(4) / v_contador(4);
                v_arreglo_ganancias(5) := v_arreglo_ganancias(5) / v_contador(5);
                v_valida := TRUE;
            END IF;
            -- ASIGNAMOS LA GANANCIA CORRESPONDIENTE AL EMPLEADO
            SELECT 
            CASE id_tramo
                WHEN 1 THEN v_arreglo_ganancias(1)
                WHEN 2 THEN v_arreglo_ganancias(2) 
                WHEN 3 THEN v_arreglo_ganancias(3)
                WHEN 4 THEN v_arreglo_ganancias(4)
                WHEN 5 THEN v_arreglo_ganancias(5)
            END 
            INTO reg_resumen.valor_bonif_utilidad
            FROM tramo_sueldo_base 
            WHERE reg_resumen.sueldo_base 
            BETWEEN tramo_inf AND tramo_sup;


            -- Objetivo

            INSERT INTO bonif_por_utilidad VALUES reg_resumen;
            COMMIT;

        EXCEPTION 
            WHEN OTHERS THEN
                dbms_output.put_line('Error en el cursor.' || sqlerrm);
        END;
    END LOOP;

EXCEPTION  
    WHEN OTHERS THEN
        dbms_output.put_line('Error en el bloque anónimo.' || sqlerrm);
END;
/





------------------------------------
-- CASO 5
------------------------------------



-- SIMULAR FECHA PROCESO 01/01/2023

CREATE SEQUENCE seq_info2 START WITH 10 INCREMENT BY 3;
CREATE SEQUENCE seq_info;
CREATE SEQUENCE seq_info3 START WITH 900 INCREMENT BY -10 MAXVALUE 900;


DECLARE
    -- DEFINIMOS EL CURSOR
    CURSOR c1 IS
        SELECT id_emp,
            to_char(numrun_emp,'999G999G999') || '-' ||dvrun_emp AS "rut",
            pnombre_emp || ' ' || snombre_emp || ' ' || 
            appaterno_emp || ' ' || apmaterno_emp AS "nombre", 
            fecha_contrato, sueldo_base, id_comuna,
            cod_afp, cod_tipo_sal
        FROM empleado;

    -- REGISTROS
    reg_c1 c1%rowtype;
    reg_info info_sii%rowtype;

    -- PORCENTAJE
    v_pct NUMBER(5,3);
    v_pct_afp NUMBER(5,3);
    v_pct_sal NUMBER(5,3);

    -- CANTIDAD DE CAMIONES ARRENDADOS
    v_cantidad_arr NUMBER(2);


BEGIN

    :b_fecha_proceso := add_months(TO_DATE('&FECHA_PROCESO'),-12);

    -- TRUNCAR EN TIEMPO DE EJECUCIÓN
    EXECUTE IMMEDIATE 'TRUNCATE TABLE INFO_SII';

    -- CREAR SECUENCIA Y REINICIARLA POR EJECUCIÓN
    EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_INFO2';
    EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_INFO';
    EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_INFO3';
    EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_INFO';
    EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_INFO2 START WITH 10 INCREMENT BY 3';
    EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_INFO3 START WITH 900 INCREMENT BY -10 MAXVALUE 900';
    COMMIT;

    FOR reg_c1 IN c1
    LOOP
        BEGIN

            -- CÁLCULOS
            reg_info.anno_tributario := to_char(TO_DATE(:b_fecha_proceso),'YYYY');
            reg_info.id_emp := reg_c1.id_emp;
            reg_info.run_empleado := to_char(seq_info.NEXTVAL,'09')||' '||reg_c1."rut"||seq_info2.NEXTVAL;
            reg_info.nombre_empleado := reg_c1."nombre";

            -- OBTENEMOS LOS MESES TRABAJADOS
            reg_info.meses_trabajados := TRUNC(MOD(months_between(TO_DATE(:b_fecha_proceso),reg_c1.fecha_contrato),12));
            reg_info.annos_trabajados := TRUNC(months_between(TO_DATE(:b_fecha_proceso),reg_c1.fecha_contrato)/12);
            reg_info.sueldo_base_mensual := reg_c1.sueldo_base || seq_info3.NEXTVAL;
            reg_info.sueldo_base_anual := reg_c1.sueldo_base * 12;

            -- BONO ANTIGUEDAD
            BEGIN
                SELECT porcentaje / 100 INTO v_pct
                FROM tramo_antiguedad
                WHERE reg_info.annos_trabajados 
                BETWEEN tramo_inf AND tramo_sup 
                AND anno_vig = to_char(TO_DATE(:b_fecha_proceso),'YYYY');
            EXCEPTION
                WHEN no_data_found THEN
                    v_pct := 0;
            END;

            reg_info.bono_annos_anual := round(reg_info.sueldo_base_anual * v_pct,0);
            
            -- MOVILIZACIÓN 12% DEL SUELDO BASE DEL EMPLEADO
            reg_info.movilizacion_anual := round(reg_info.sueldo_base_anual * 0.12,0);
            
            -- PAGO ADICIONAL A EMPLEADOS DE COMUNAS MÁS LEJANAS DE SANTIAGO

                /*
                María Pinto 117
Curacaví 118
Talagante 119
El Monte 120
Buin 121
                */
        
            IF reg_c1.id_comuna = 117 THEN
                reg_info.movilizacion_anual := reg_info.movilizacion_anual + round((reg_info.sueldo_base_anual * 0.2),0);
            ELSIF reg_c1.id_comuna = 118 THEN
                reg_info.movilizacion_anual := reg_info.movilizacion_anual + round((reg_info.sueldo_base_anual * 0.25),0);
            ELSIF reg_c1.id_comuna = 119 THEN
                reg_info.movilizacion_anual := reg_info.movilizacion_anual + round((reg_info.sueldo_base_anual * 0.30),0);
            ELSIF reg_c1.id_comuna = 120 THEN
                reg_info.movilizacion_anual := reg_info.movilizacion_anual + round((reg_info.sueldo_base_anual * 0.35),0);
            ELSIF reg_c1.id_comuna = 121 THEN
                reg_info.movilizacion_anual := reg_info.movilizacion_anual + round((reg_info.sueldo_base_anual * 0.40),0);
            END IF;
            

            -- COLACIÓN

            reg_info.colacion_anual := round(reg_info.sueldo_base_anual * 0.2,0);
            
            -- DESCUENTOS POR AFP
            SELECT porc_descto_afp / 100 INTO v_pct_afp
            FROM afp 
            WHERE cod_afp = reg_c1.cod_afp;

            -- DESCUENTO POR SALUD
            SELECT porc_descto_salud / 100 INTO v_pct_sal
            FROM tipo_salud
            WHERE cod_tipo_sal = reg_c1.cod_tipo_sal;

            reg_info.desctos_legales := round(reg_info.sueldo_base_anual * v_pct_afp,0) + round(reg_info.sueldo_base_anual * v_pct_sal,0);
            
            reg_info.sueldo_bruto_anual := reg_info.sueldo_base_anual + reg_info.bono_annos_anual + reg_info.movilizacion_anual + reg_info.colacion_anual;
            
                        
            -- OBTENERMOS EL CARGO
            BEGIN
                SELECT 'Encargado de Arriendos',COUNT(id_camion) 
                INTO reg_info.cargo, v_cantidad_arr
                FROM empleado E
                INNER JOIN camion C
                ON E.id_emp = C.id_emp
                WHERE E.id_emp = reg_info.id_emp
                GROUP BY 'Encargado de Arriendos';
                
                -- ES ENCARGADO DE ARRIENDOS 
                reg_info.bono_especial_anual := round(reg_info.sueldo_base_anual * ((v_cantidad_arr * 5) /100),0);
             
            EXCEPTION   
                WHEN no_data_found THEN
                    reg_info.cargo := 'Labores Administrativas';

                    -- ES ENCARGADO DE LABORES ADMINISTRATIVAS
                    
                    -- X SUELDO BRUTO
                    reg_info.bono_especial_anual := round(reg_info.sueldo_bruto_anual * 0.12,0);
            END;
            
            /*
                o	sueldo base +
                 bono por años trabajados +
                  bono por arriendo de camiones +
                   bono por bienestar
                   – descuento salud –
                    descuento afp
            */
            -- IMPONIBLE ANUAL
            reg_info.renta_imponible_anual  := reg_info.sueldo_base_anual + reg_info.bono_annos_anual 
            + reg_info.bono_especial_anual + reg_info.desctos_legales;
            
            --OBJETIVO
            INSERT INTO info_sii VALUES reg_info;
            COMMIT;
        EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Error en el cursor' || sqlerrm);
        END;
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        dbms_output.put_line('Error en el bloque anónimo.' || sqlerrm);
END;
/