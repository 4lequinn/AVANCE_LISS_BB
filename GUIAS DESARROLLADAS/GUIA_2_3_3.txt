


-- CASO 1

-- ACTIVAMOS LA SALIDA DE DBMS
SET SERVEROUTPUT ON;


-- CREAMOS TIPOS DE DATO VARRAY
CREATE OR REPLACE TYPE TIPO_PUNTOS_NORMALES IS VARRAY(1) OF NUMBER NOT NULL;

CREATE OR REPLACE TYPE TIPO_PUNTOS_EXTRA IS VARRAY(3) OF NUMBER NOT NULL;


-- CREAMOS UNA VARIABLE BIND PARA GESTIONAR LA FECHA DE PROCESO
VARIABLE B_FECHA_PROCESO VARCHAR2(10);


-----------------------------------------------------------------
-- SIMULAR FECHA CON EL AÑO 2022
-- PROCESARÁ A LOS CLIENTES DEL AÑO PASADO (2021)
-----------------------------------------------------------------

-- OBJETIVO POBLAR LA TABLA DETALLE_PUNTOS_TARJETA_CATB
DECLARE

    -- DECLARAMOS UNA VARIABLE DE TIPO CURSOR QUE RECORRE LOS DATOS DE LOS CLIENTES
    CURSOR C1(P_FECHA DATE) IS 
            SELECT C.NUMRUN, C.DVRUN, TC.NRO_TARJETA, TTC.NRO_TRANSACCION,
                TTC.FECHA_TRANSACCION, TTT.COD_TPTRAN_TARJETA,
                TTT.NOMBRE_TPTRAN_TARJETA, TTC.MONTO_TRANSACCION, TP.COD_TIPO_CLIENTE
                FROM CLIENTE C
                INNER JOIN TIPO_CLIENTE TP
                ON C.COD_TIPO_CLIENTE = TP.COD_TIPO_CLIENTE
                INNER JOIN TARJETA_CLIENTE TC
                ON C.NUMRUN = TC.NUMRUN
                INNER JOIN TRANSACCION_TARJETA_CLIENTE TTC
                ON TC.NRO_TARJETA = TTC.NRO_TARJETA
                INNER JOIN TIPO_TRANSACCION_TARJETA TTT
                ON TTC.COD_TPTRAN_TARJETA = TTT.COD_TPTRAN_TARJETA
                WHERE TO_CHAR(TTC.FECHA_TRANSACCION,'YYYY') = TO_CHAR(P_FECHA,'YYYY') 
                ORDER BY TTC.FECHA_TRANSACCION ASC, C.NUMRUN ASC, TTC.NRO_TRANSACCION ASC;


    CURSOR C2 IS 
        SELECT TO_CHAR(FECHA_TRANSACCION,'MM') AS "MES"
        FROM DETALLE_PUNTOS_TARJETA_CATB
        GROUP BY TO_CHAR(FECHA_TRANSACCION,'MM')
        ORDER BY TO_CHAR(FECHA_TRANSACCION,'MM') ASC;
        

    -- DECLARAMOS VARIABLES DE TIPO REGISTRO
    
    -- REGISTRO DEL CURSOR
    REG_C1 C1%ROWTYPE;
    REG_C2 C2%ROWTYPE;
    
    -- REGISTRO DE LA TABLA 
    REG_DETALLE_CATB DETALLE_PUNTOS_TARJETA_CATB%ROWTYPE;
    REG_RESUMEN RESUMEN_PUNTOS_TARJETA_CATB%ROWTYPE;
    
    -- DECLARAMOS LAS VARIABLES DE TIPO VARRAY 
    T_PUNTOS_NORMALES TIPO_PUNTOS_NORMALES DEFAULT TIPO_PUNTOS_NORMALES(250);
    
    T_PUNTOS_EXTRA TIPO_PUNTOS_EXTRA DEFAULT TIPO_PUNTOS_EXTRA(300,550,700);
    
BEGIN
    

    -- SOLICITAMOS INGRESAR LA FECHA DE PROCESO
    :B_FECHA_PROCESO := ADD_MONTHS(TO_DATE('&fecha'),-12); -- LE RESTAMOS UN AÑO A LA FECHA DE PROCESO

    -- TRUNCAMOS LA TABLA EN TIEMPO DE EJECUCIÓN     
    EXECUTE IMMEDIATE 'TRUNCATE TABLE DETALLE_PUNTOS_TARJETA_CATB';
    EXECUTE IMMEDIATE 'TRUNCATE TABLE  RESUMEN_PUNTOS_TARJETA_CATB';
    COMMIT;
    
    -- INICIAMOS EL CURSOR PARA LA TABLA DETALLE
    FOR REG_C1 IN C1(:B_FECHA_PROCESO) 
    LOOP
        BEGIN
            
            -- CÁLCULOS 
            
            REG_DETALLE_CATB.NUMRUN := REG_C1.NUMRUN; 
            REG_DETALLE_CATB.DVRUN := REG_C1.DVRUN; 
            REG_DETALLE_CATB.NRO_TARJETA := REG_C1.NRO_TARJETA; 
            REG_DETALLE_CATB.NRO_TRANSACCION := REG_C1.NRO_TRANSACCION; 
            REG_DETALLE_CATB.FECHA_TRANSACCION := REG_C1.FECHA_TRANSACCION; 
            REG_DETALLE_CATB.TIPO_TRANSACCION := REG_C1.NOMBRE_TPTRAN_TARJETA; 
            REG_DETALLE_CATB.MONTO_TRANSACCION := REG_C1.MONTO_TRANSACCION; 
            
            -- EVALUAR PUNTOS
    
            -- SISTEMA DE PUNTOS NORMALES
            
            
            -- 101 Compras Tiendas Retail o Asociadas
            -- 102 Avance en Efectivo
            -- 103 Súper Avance en Efectivo
            
            IF REG_C1.COD_TPTRAN_TARJETA IN(101,102,103) THEN 
            
                 -- Por cada $100.000 de monto que posea el cliente, se le sumarán 250 puntos all the best.
                REG_DETALLE_CATB.PUNTOS_ALLTHEBEST := TRUNC(REG_DETALLE_CATB.MONTO_TRANSACCION / 100000) * T_PUNTOS_NORMALES(1);
            
                -- SISTEMA DE PUNTOS EXTRA
                    
                -- VERIFICACIÓN
                -- Dueñas de casa y pensionados o de tercera edad.
                IF REG_C1.COD_TIPO_CLIENTE IN(30,40) THEN
                
                    IF  REG_C1.MONTO_TRANSACCION BETWEEN 500000 AND 700000 THEN
                        REG_DETALLE_CATB.PUNTOS_ALLTHEBEST := REG_DETALLE_CATB.PUNTOS_ALLTHEBEST  + TRUNC(REG_DETALLE_CATB.MONTO_TRANSACCION / 100000) * T_PUNTOS_EXTRA(1);
                    ELSIF REG_C1.MONTO_TRANSACCION BETWEEN 700001 AND 900000 THEN
                        REG_DETALLE_CATB.PUNTOS_ALLTHEBEST := REG_DETALLE_CATB.PUNTOS_ALLTHEBEST  + TRUNC(REG_DETALLE_CATB.MONTO_TRANSACCION / 100000) * T_PUNTOS_EXTRA(2);
                    ELSIF REG_C1.MONTO_TRANSACCION > 900000 THEN
                        REG_DETALLE_CATB.PUNTOS_ALLTHEBEST := REG_DETALLE_CATB.PUNTOS_ALLTHEBEST  + TRUNC(REG_DETALLE_CATB.MONTO_TRANSACCION / 100000) * T_PUNTOS_EXTRA(3);
                    END IF;
                
                END IF; 
                
            END IF;    
            
            -- OBJETIVO POBLAR LA TABLA DETALLE_PUNTOS_TARJETA_CATB
            
            INSERT INTO DETALLE_PUNTOS_TARJETA_CATB VALUES REG_DETALLE_CATB;
            COMMIT;
            
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('Error en el proceso del cursor' || SQLERRM);
        END;
    END LOOP;
    
    
    -- INICIAMOS EL CURSOR PARA LA TABLA RESUMEN
    FOR REG_C2 IN C2
    LOOP
        BEGIN   
            -- CÁLCULOS
            
            REG_RESUMEN.MES_ANNO:= REG_C2."MES" ||TO_CHAR(TO_DATE(:B_FECHA_PROCESO),'YYYY');          
            REG_RESUMEN.MONTO_TOTAL_COMPRAS := 0;
            REG_RESUMEN.TOTAL_PUNTOS_COMPRAS := 0;
            REG_RESUMEN.MONTO_TOTAL_AVANCES := 0;
            REG_RESUMEN.TOTAL_PUNTOS_AVANCES := 0;
            REG_RESUMEN.MONTO_TOTAL_SAVANCES:= 0;
            REG_RESUMEN.TOTAL_PUNTOS_SAVANCES:= 0;            


            -- MONTO COMPRAS
            BEGIN
                SELECT SUM(MONTO_TRANSACCION) AS "MONTO", SUM(PUNTOS_ALLTHEBEST) INTO REG_RESUMEN.MONTO_TOTAL_COMPRAS, REG_RESUMEN.TOTAL_PUNTOS_COMPRAS
                FROM DETALLE_PUNTOS_TARJETA_CATB
                GROUP BY TO_CHAR(FECHA_TRANSACCION, 'MM'), TIPO_TRANSACCION
                HAVING TO_CHAR(FECHA_TRANSACCION, 'MM') = REG_C2."MES" AND TIPO_TRANSACCION = 'Compras Tiendas Retail o Asociadas';            
            EXCEPTION
                WHEN OTHERS THEN
                    NULL;
            END;
            
            -- MONTO AVANCES
            BEGIN
                SELECT SUM(MONTO_TRANSACCION) AS "MONTO", SUM(PUNTOS_ALLTHEBEST) INTO REG_RESUMEN.MONTO_TOTAL_AVANCES , REG_RESUMEN.TOTAL_PUNTOS_AVANCES
                FROM DETALLE_PUNTOS_TARJETA_CATB
                GROUP BY TO_CHAR(FECHA_TRANSACCION, 'MM'), TIPO_TRANSACCION
                HAVING TO_CHAR(FECHA_TRANSACCION, 'MM') = REG_C2."MES" AND TIPO_TRANSACCION = 'Avance en Efectivo';            
            EXCEPTION
                WHEN OTHERS THEN
                    NULL;
            END;
            
            -- MONTO SUPER AVANCES
            BEGIN
                SELECT SUM(MONTO_TRANSACCION) AS "MONTO", SUM(PUNTOS_ALLTHEBEST) INTO REG_RESUMEN.MONTO_TOTAL_SAVANCES, REG_RESUMEN.TOTAL_PUNTOS_SAVANCES
                FROM DETALLE_PUNTOS_TARJETA_CATB
                GROUP BY TO_CHAR(FECHA_TRANSACCION, 'MM'), TIPO_TRANSACCION
                HAVING TO_CHAR(FECHA_TRANSACCION, 'MM') = REG_C2."MES" AND TIPO_TRANSACCION = 'Súper Avance en Efectivo';            
            EXCEPTION
                WHEN OTHERS THEN
                    NULL;
            END;            

            -- OBJETIVO
            INSERT INTO RESUMEN_PUNTOS_TARJETA_CATB VALUES REG_RESUMEN;
            COMMIT;
        
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('ERROR EN EL 2DO CURSOR' || SQLERRM);
        END;
    END LOOP;
    
END;


-- CASO 2

-- OBJETIVO 
-- SE NOS SOLICITA POBLAR LA TABLA DETALLE_APORTE_SBIF
-- SE NOS SOLICITA POBLAR LA TABLA RESUMEN_APORTE_SBIF

-----------------------------------------------------------------
-- SIMULAR FECHA CON EL AÑO 2023
-- PROCESARÁ A LOS CLIENTES DEL AÑO PASADO (2022)
-----------------------------------------------------------------

DECLARE
    -- DECLARAMOS UN CURSOR PARA POBLAR LA TABLA DETALLE_APORTE_SBIF
    CURSOR C1 (P_FECHA DATE) IS
        SELECT C.NUMRUN, C.DVRUN, TC.NRO_TARJETA, TTC.NRO_TRANSACCION,
                TTC.FECHA_TRANSACCION, TTT.NOMBRE_TPTRAN_TARJETA,
                TTC.MONTO_TOTAL_TRANSACCION
                FROM CLIENTE C
                INNER JOIN TIPO_CLIENTE TP
                ON C.COD_TIPO_CLIENTE = TP.COD_TIPO_CLIENTE
                INNER JOIN TARJETA_CLIENTE TC
                ON C.NUMRUN = TC.NUMRUN
                INNER JOIN TRANSACCION_TARJETA_CLIENTE TTC
                ON TC.NRO_TARJETA = TTC.NRO_TARJETA
                INNER JOIN TIPO_TRANSACCION_TARJETA TTT
                ON TTC.COD_TPTRAN_TARJETA = TTT.COD_TPTRAN_TARJETA
                WHERE TO_CHAR(TTC.FECHA_TRANSACCION,'YYYY') = TO_CHAR((P_FECHA),'YYYY') 
                AND TTT.COD_TPTRAN_TARJETA IN (102, 103)
                ORDER BY TTC.FECHA_TRANSACCION ASC, C.NUMRUN ASC;  
                
    -- DECLARAMOS UN CURSOR PARA POBLAR LA TABLA RESUMEN_APORTE_SBIF
    CURSOR C2 IS 
        SELECT TO_CHAR(FECHA_TRANSACCION,'MMYYYY'), TIPO_TRANSACCION, SUM(MONTO_TRANSACCION), SUM(APORTE_SBIF) 
        FROM DETALLE_APORTE_SBIF
        GROUP BY TO_CHAR(FECHA_TRANSACCION,'MMYYYY'), TIPO_TRANSACCION
        ORDER BY TO_CHAR(FECHA_TRANSACCION,'MMYYYY'), TIPO_TRANSACCION ASC; 
        
    -- DECLARAMOS REGISTROS
    REG_C1 C1%ROWTYPE;
    REG_C2 C2%ROWTYPE;
    REG_DETALLE DETALLE_APORTE_SBIF%ROWTYPE;
    REG_RESUMEN RESUMEN_APORTE_SBIF%ROWTYPE;
    
    -- DECLARAMOS UNA VARIABLES PARA OBTENER EL PORCENTAJE
    V_PTC_SBIF NUMBER(2,2) DEFAULT 0;    
BEGIN
    
    :B_FECHA_PROCESO := ADD_MONTHS(TO_DATE('&fecha'),-12);
    
    -- TRUNCAMOS LAS TABLAS EN TIEMPO DE EJECUCIÓN
    EXECUTE IMMEDIATE 'TRUNCATE TABLE DETALLE_APORTE_SBIF';
    EXECUTE IMMEDIATE 'TRUNCATE TABLE RESUMEN_APORTE_SBIF';
    COMMIT;
    
    FOR REG_C1 IN C1(TO_DATE(:B_FECHA_PROCESO))
    LOOP
        BEGIN
        
            -- Cálculos
            REG_DETALLE.NUMRUN := REG_C1.NUMRUN; 
            REG_DETALLE.DVRUN := REG_C1.DVRUN; 
            REG_DETALLE.NRO_TARJETA := REG_C1.NRO_TARJETA; 
            REG_DETALLE.NRO_TRANSACCION := REG_C1.NRO_TRANSACCION; 
            REG_DETALLE.FECHA_TRANSACCION :=REG_C1.FECHA_TRANSACCION; 
            REG_DETALLE.TIPO_TRANSACCION := REG_C1.NOMBRE_TPTRAN_TARJETA; 
            REG_DETALLE.MONTO_TRANSACCION := REG_C1.MONTO_TOTAL_TRANSACCION; 
            
            -- TABLA DE TRAMOS
            
            -- EXTRAERMOS EL PORCENTAJE SEGÚN EL MONTO 
            BEGIN
                SELECT (PORC_APORTE_SBIF / 100) INTO V_PTC_SBIF FROM TRAMO_APORTE_SBIF 
                WHERE REG_DETALLE.MONTO_TRANSACCION BETWEEN TRAMO_INF_AV_SAV AND TRAMO_SUP_AV_SAV;
            -- EN CASO DE NO EXISTIR PORCENTAJE PARA DICHO MONTO 
            -- PORCENTAJE QUEDA EN 0
            EXCEPTION
                WHEN OTHERS THEN
                    NULL;
            END;
            
            -- CÁLCULAMOS EL SBIF SEGÚN EL MONTO
            REG_DETALLE.APORTE_SBIF := ROUND(REG_DETALLE.MONTO_TRANSACCION * V_PTC_SBIF,0);
            
            -- Objetivo
            INSERT INTO DETALLE_APORTE_SBIF VALUES REG_DETALLE;
            COMMIT;
        
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('Error en el cursor 1' || SQLERRM);
        END;
    END LOOP;
    
    -- 2DA PARTE
    FOR REG_C2 IN C2 
    LOOP 
        BEGIN
            
            -- Cálculos
            REG_RESUMEN := REG_C2;
            
            -- Objetivo
            INSERT INTO RESUMEN_APORTE_SBIF VALUES REG_RESUMEN;
            COMMIT;
            
        EXCEPTION
            WHEN OTHERS THEN 
                DBMS_OUTPUT.PUT_LINE('ERROR CON EL 2DO CURSOR ' || SQLERRM);
        END;
    END LOOP;
    
END;

