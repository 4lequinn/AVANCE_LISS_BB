------------------------------
-- CASO 1
------------------------------


-- ACTIVAMOS LA SALIDA DE DBMS
SET SERVEROUTPUT ON;

-- Crear el directorio de las fotos de los clientes 

CREATE OR REPLACE DIRECTORY fotos_clientes AS 'C:\Imagenes\fotos_clientes';

-- Dar permisos desde el usuario Sys a nuestra conexión
-- GRANT READ, WRITE ON DIRECTORY fotos_clientes TO GUIA5;


-------------------------------------------------

DECLARE
    -- Variables para almacenar y cargar las fotos
    v_blob BLOB;
    v_bfile BFILE;
    
    -- Identificación de la foto
    v_nombre VARCHAR2(100);

    -- Directorio donde se encuentra
    v_directorio VARCHAR2(80);
    
    -- Cursor que recorre las fotos de los Clientes
    CURSOR cur_fotos IS 
    SELECT NRO_CLIENTE, foto 
    FROM cliente 
    FOR UPDATE OF foto;

BEGIN 
    -- Recorrer el cursor y almacenar las fotos
    FOR X IN cur_fotos 
    LOOP
        BEGIN 
        
            --Directorio y nombre del archivo
            v_directorio := 'FOTOS_CLIENTES';
            v_nombre := X.NRO_CLIENTE || '.JPG';
            v_blob :=  X.foto;
            
            -- Proceso de actualización de fotos
            v_bfile := bfilename(v_directorio, v_nombre);
            
            -- blob, bfile
            dbms_lob.OPEN(v_bfile, dbms_lob.lob_readonly);
            dbms_lob.loadfromfile(v_blob, v_bfile, dbms_lob.getlength(v_bfile));
            dbms_lob.CLOSE(v_bfile);

            DBMS_OUTPUT.PUT_LINE(v_nombre || ' ACTUALIZADO!');

        EXCEPTION 
            WHEN OTHERS THEN 
                DBMS_OUTPUT.PUT_LINE('El cliente NRO. ' || X.NRO_CLIENTE ||' no tiene foto.');
        END;
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN 
        DBMS_OUTPUT.PUT_LINE('Error en el bloque anónimo.');
END;
/


----------------------------------------------
-- CASO 2
----------------------------------------------

-- VARIABLE BIND 
VARIABLE b_fecha_proceso VARCHAR2(10);


DECLARE
    -- CURSOR 
    CURSOR C1 IS 
        SELECT nro_cliente,
        TO_CHAR(numrun,'999G999G999') || '-'|| DVRUN AS "rut", 
        PNOMBRE || ' ' || SNOMBRE || ' ' || APPATERNO || ' ' || APMATERNO as "nombre",
        COD_TIPO_CLIENTE
        FROM CLIENTE
        ORDER BY nro_cliente asc;
    
    -- REGISTRO 
    REG_CLIENTE CLIENTE_TODOSUMA%ROWTYPE;

    -- VARRAY
    TYPE tipo_pesos IS VARRAY(4) OF NUMBER(4) NOT NULL;

    v_arreglo_pesos tipo_pesos DEFAULT tipo_pesos(1200,300,550,700); 

BEGIN

    -- ASIGNAMOS FECHA
    :b_fecha_proceso := ADD_MONTHS(TO_DATE('01/01/2022'),-12);

    -- TRUNCAR TABLA EN TIEMPO DE EJECUCIÓN
    EXECUTE IMMEDIATE 'TRUNCATE TABLE CLIENTE_TODOSUMA';
    COMMIT;

    FOR x IN C1 
    LOOP
        BEGIN

            -- CÁLCULOS

            reg_cliente.NRO_CLIENTE := x.nro_cliente;
            reg_cliente.RUN_CLIENTE := x."rut";
            reg_cliente.NOMBRE_CLIENTE := x."nombre";
            
            SELECT NOMbRe_TIPO_CLIENTE 
            INTO reg_cliente.TIPO_CLIENTE
            FROM TIPO_CLIENTE
            WHERE COD_TIPO_CLIENTE = x.cod_tipo_cliente;

            select NVL(SUM(MONTO_SOLICITADO),0) 
            INTO reg_cliente.MONTO_SOLIC_CREDITOS 
            from CREDITO_CLIENTE 
            WHERE NRO_CLIENTE = X.NRO_CLIENTE
            AND TO_CHAR(FECHA_SOLIC_CRED,'YYYY') = TO_CHAR(TO_DATE(:b_fecha_proceso),'YYYY') ;
           

            -- PESOS NORMALES
            reg_cliente.MONTO_PESOS_TODOSUMA := TRUNC(reg_cliente.MONTO_SOLIC_CREDITOS / 100000) * V_ARREGLO_PESOS(1);

            -- PESOS EXTRA
            IF reg_cliente.MONTO_SOLIC_CREDITOS between 1000001 AND 3000000 THEN
                reg_cliente.MONTO_PESOS_TODOSUMA := reg_cliente.MONTO_PESOS_TODOSUMA + TRUNC(reg_cliente.MONTO_SOLIC_CREDITOS / 100000) * V_ARREGLO_PESOS(2);
            ELSIF reg_cliente.MONTO_SOLIC_CREDITOS between 3000001 AND 6000000 THEN
                reg_cliente.MONTO_PESOS_TODOSUMA := reg_cliente.MONTO_PESOS_TODOSUMA + TRUNC(reg_cliente.MONTO_SOLIC_CREDITOS / 100000) * V_ARREGLO_PESOS(3);
            ELSIF reg_cliente.MONTO_SOLIC_CREDITOS > 6000000 THEN
                reg_cliente.MONTO_PESOS_TODOSUMA := reg_cliente.MONTO_PESOS_TODOSUMA + TRUNC(reg_cliente.MONTO_SOLIC_CREDITOS / 100000) * V_ARREGLO_PESOS(4);
            END IF;
            

            --OBJETIVO

            insert into CLIENTE_TODOSUMA VALUES REG_CLIENTE;

        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('Error en el cursor.' || SQLERRM);
        END;
    END LOOP;
END;
/


----------------------------------------
-- CASO 3
----------------------------------------


-- CASO 3
----------------------------------------------

-- CREAMOS UN RESPALDO DE LA TABLA CUOTA_CREDITO_CLIENTE

DROP TABLE CUOTA_BK;
CREATE TABLE CUOTA_BK AS SELECT * FROM CUOTA_CREDITO_CLIENTE;
COMMIT;


CREATE OR REPLACE PROCEDURE SP_UPDATE_CUOTA(v_nro_solicitud in number,v_nro_cliente IN NUMBER,v_cantidad IN NUMBER) IS

    -- REGISTROS
    reg_resumen CUOTA_BK%ROWTYPE;
    
    -- VARIABLE QUE ITERA POR CADA PROCESO
    v_contador NUMBER(2) DEFAULT 0;
    
    -- VARIABLE QUE GUARDA EL PORCENTAJE SEGÚN SU TARJETA DE CRÉDITO
    v_pct_cred NUMBER(8,8);
    
BEGIN 
        
        -- ASIGNAMOS LA CANTIDAD DE CUOTAS A POSTERGAR
        FOR x IN 1..v_cantidad
        LOOP
            BEGIN
                
                DBMS_OUTPUT.PUT_LINE(x);
                
                -- CÁLCULOS
                
                BEGIN
                SELECT ccc.NRO_SOLIC_CREDITO, 
                ccc.NRO_CUOTA, ccc.FECHA_VENC_CUOTA, ccc.VALOR_CUOTA, 
                ccc.FECHA_PAGO_CUOTA, ccc.MONTO_PAGADO, ccc.SALDO_POR_PAGAR, ccc.COD_FORMA_PAGO 
                INTO REG_RESUMEN
                FROM CUOTA_BK CCC
                INNER JOIN CREDITO_CLIENTE CC
                ON CC.NRO_SOLIC_CREDITO = CCC.NRO_SOLIC_CREDITO 
                WHERE CC.NRO_SOLIC_CREDITO = v_nro_solicitud 
                AND CC.NRO_CLIENTE = v_nro_cliente
                ORDER BY NRO_CUOTA DESC
                FETCH FIRST 1 ROWS ONLY;
                
                EXCEPTION WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('SE CAE AQUI' || sqlerrm);
                END;
                -- VALIDAMOS SI ES LA PRIMERA CUOTA EN LA ITERACION
                IF   x = 1 THEN
                
                    SELECT CASE cod_credito 
                                    WHEN 1 THEN 0.005
                                    WHEN 2 THEN 0.01
                                    WHEN 3 THEN 0.02
                                    END 
                                    INTO v_pct_cred 
                    FROM CREDITO_CLIENTE 
                    WHERE NRO_CLIENTE = v_nro_cliente
                    AND nro_solic_credito = v_nro_solicitud;
                    
                    -- SI ES 1 AGREGAMOS EL INTERÉS AL VALOR CUOTA
                    reg_resumen.valor_cuota := reg_resumen.valor_cuota + ROUND(reg_resumen.valor_cuota * v_pct_cred,0);
                    
                END IF;
                
                
                -- NRO CUOTA
                reg_resumen.NRO_CUOTA := reg_resumen.NRO_CUOTA + 1;
                
                -- FECHA DE VENCIMIENTO DE LA CUOTA 
                REG_RESUMEN.FECHA_VENC_CUOTA := ADD_MONTHS(REG_RESUMEN.FECHA_VENC_CUOTA,1);
                
                -- FECHA PAGO CUOTA
                REG_RESUMEN.FECHA_PAGO_CUOTA := NULL;
                
                -- MONTO PAGADO
                REG_RESUMEN.MONTO_PAGADO := NULL; 
                
                -- SALDO POR PAGAR 
                REG_RESUMEN.SALDO_POR_PAGAR := NULL;
                
                --COD FORMA PAGO
                REG_RESUMEN.COD_FORMA_PAGO  := NULL;
                
                -- OBJETIVO
                
                --dbms_output.put_line(REG_RESUMEN.NRO_CUOTA);
                INSERT INTO cuota_bk VALUES REG_RESUMEN;
                COMMIT;
                
            EXCEPTION
                WHEN OTHERS THEN
                    DBMS_OUTPUT.PUT_LINE('Error en el cursor =( : ' || SQLERRM);
            END;
        END LOOP;
        
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error =( : ' || SQLERRM);
END SP_UPDATE_CUOTA;
/


BEGIN
    -- VALORES 3400 , 67 , 1
    SP_UPDATE_CUOTA(3004, 67, 1);
   
    -- VALORES 2400 , 13 , 1
    SP_UPDATE_CUOTA(2004, 13, 1);
   
    -- VALORES 2001 , 5 , 2
    SP_UPDATE_CUOTA(2001, 5, 2);
   
    -- VALORES 2002 , 6 , 1
    SP_UPDATE_CUOTA(2002, 6, 1);

    -- VALORES 2006 , 26 , 1 
    SP_UPDATE_CUOTA(2006, 26, 1);
    
    -- VALORES 2007 , 27 , 1
    SP_UPDATE_CUOTA(2007, 27, 1);
    
    -- VALORES 3008 , 84 , 1
    SP_UPDATE_CUOTA(3008, 84, 1);
    
    -- VALORES 3003 , 66, 1
    SP_UPDATE_CUOTA(3003, 66, 1);
END;
/


SELECT * FROM CUOTA_BK
WHERE nro_solic_credito = 2001
ORDER BY NRO_CUOTA DESC
FETCH FIRST 2 ROWS ONLY;



SELECT * FROM CUOTA_BK
WHERE nro_solic_credito = 2004
ORDER BY NRO_CUOTA DESC
FETCH FIRST 1 ROWS ONLY;


SELECT * FROM CUOTA_BK
WHERE nro_solic_credito = 3004
ORDER BY NRO_CUOTA DESC
FETCH FIRST 1 ROWS ONLY;




SELECT * FROM CUOTA_BK
WHERE nro_solic_credito = 2002
ORDER BY NRO_CUOTA DESC
FETCH FIRST 2 ROWS ONLY;



SELECT * FROM CUOTA_BK
WHERE nro_solic_credito = 2006
ORDER BY NRO_CUOTA DESC
FETCH FIRST 2 ROWS ONLY;



SELECT * FROM CUOTA_BK
WHERE nro_solic_credito = 2007
ORDER BY NRO_CUOTA DESC
FETCH FIRST 2 ROWS ONLY;



SELECT * FROM CUOTA_BK
WHERE nro_solic_credito = 3008
ORDER BY NRO_CUOTA DESC
FETCH FIRST 2 ROWS ONLY;



SELECT * FROM CUOTA_BK
WHERE nro_solic_credito = 3003
ORDER BY NRO_CUOTA DESC
FETCH FIRST 2 ROWS ONLY;


