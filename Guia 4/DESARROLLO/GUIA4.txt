-- PERMITE IMPRIMIR AUTOMÁTICAMENTE EL VALOR DE LA VARIABLE BIND
SET AUTOPRINT ON;

-- SALIDA DE DBMS
SET SERVEROUTPUT ON;

-- VARIABLE BIND
VARIABLE b_fecha_proceso VARCHAR2(10);

/*
    FECHA DE PRUEBA 10/12/2020
*/

---------------------------------------------------------------
-- CASO 2
---------------------------------------------------------------

DECLARE 
    CURSOR c1 IS 
        SELECT ID_EMP, NUMRUN_EMP, 
        DVRUN_EMP, pnombre_emp ||' '|| SNOMBRE_EMP|| ' '|| APPATERNO_EMP|| ' '||
        APMATERNO_EMP as "nombre", 
        -- NOMBRE USUARIO
        LOWER(SUBSTR(NOMBRE_ESTADO_CIVIL,0,1)) || SUBSTR(pnombre_emp,0,3)  || LENGTH(pnombre_emp) || '*' || SUBSTR(SUELDO_BASE,-1,1) || DVRUN_EMP  ||
        TRUNC(MONTHS_BETWEEN(SYSDATE,FECHA_CONTRATO)/12) as "nombre_usuario",
        -- CONTRASENIA
        SUBSTR(NUMRUN_EMP,3,1) || TO_NUMBER(TO_CHAR(FECHA_NAC,'YYYY') ) + 2 ||SUBSTR((SUELDO_BASE - 1),-3,3) ||
        
        CASE ec.ID_ESTADO_CIVIL
            WHEN 60 THEN LOWER(substr(APPATERNO_EMP,0,2))
            WHEN 10 THEN LOWER(substr(APPATERNO_EMP,0,2)) -- OK
            WHEN 20 THEN LOWER(substr(APPATERNO_EMP,0,1) ||  substr(APPATERNO_EMP,-1,1))-- 
            WHEN 30 THEN LOWER(substr(APPATERNO_EMP,0,1) ||  substr(APPATERNO_EMP,-1,1))-- OK
            WHEN 40 THEN LOWER(substr(APPATERNO_EMP,-3,2)) -- OK 
            WHEN 50 THEN LOWER(substr(APPATERNO_EMP,-2,2))  
            ELSE
                'X'
        END || ID_EMP AS "clave_usuario",
        -- ANIOS
        TRUNC(MONTHS_BETWEEN(SYSDATE,FECHA_CONTRATO)/12) AS "anios"
        FROM empleado e
        INNER JOIN ESTADO_CIVIL ec
        ON e.ID_ESTADO_CIVIL = ec.ID_ESTADO_CIVIL;
        
        -- Registros
        reg_c1 c1%rowtype;
        reg_usuario USUARIO_CLAVE%rowtype;
        
BEGIN

    -- TRUNCAR LA TABLA EN TIEMPO DE EJECUCION
    EXECUTE IMMEDIATE 'TRUNCATE TABLE USUARIO_CLAVE';    
    
    :b_fecha_proceso := '&dia' ||'/'||'&mes'||'/'||'&anio';

    FOR reg_c1 IN c1
    LOOP
        -- Cálculos
        reg_usuario.ID_EMP := reg_c1.id_emp;
        reg_usuario.NUMRUN_EMP := reg_c1.NUMRUN_EMP;
        reg_usuario.DVRUN_EMP := reg_c1.DVRUN_EMP;
        reg_usuario.NOMBRE_EMPLEADO := reg_c1."nombre";
        reg_usuario.NOMBRE_USUARIO := reg_c1."nombre_usuario";
        reg_usuario.CLAVE_USUARIO := reg_c1."clave_usuario" || TO_CHAR(TO_DATE(:b_fecha_proceso),'MMYYYY');
        
        IF TO_NUMBER(reg_c1."anios") < 10 THEN
        -- NOMBRE USUARIO
             reg_usuario.NOMBRE_USUARIO := reg_usuario.NOMBRE_USUARIO || 'X';
        END IF;
        
        -- Objetivo
        INSERT INTO USUARIO_CLAVE VALUES reg_usuario;
        COMMIT;
    END LOOP;
END;
/


---------------------------------------------------------------
-- CASO 3
---------------------------------------------------------------

/*

    VALOR DEL PORCENTAJE 22.5

*/

-- POBLAR LA TABLA HIST_ARRIENDO_ANUAL_CAMION

EXEC :B_FECHA_PROCESO := '01/01/2022';

-- REALIZAMOS UN RESPALDO DE LA TABLA CAMIÓN
DROP TABLE CAMION_BK;
CREATE TABLE CAMION_BK AS SELECT * FROM CAMION;

DECLARE
    
    -- CURSOR
    CURSOR C_CAMION IS
        SELECT ID_CAMION, NRO_PATENTE, 
        VALOR_ARRIENDO_DIA, VALOR_GARANTIA_DIA
        FROM CAMION;
    
    -- REGISTROS
    REG_C_CAMION C_CAMION%ROWTYPE;
    REG_RESUMEN HIST_ARRIENDO_ANUAL_CAMION%ROWTYPE;
    
    -- SQL DINÁMICO
    v_sql VARCHAR2(200);
    
    -- ACTUALIZAR VALOR ARRIENDO DIA Y VALOR GARANTIA DIA
    TYPE tipo_valor IS VARRAY(2) OF NUMBER(10) ;
    
    v_arreglo_valor tipo_valor :=  tipo_valor(0,0);
    
    -- PORCENTAJE
    v_pct_arriendo NUMBER(5,3) DEFAULT &porcentaje;
    
BEGIN
    
    -- RESTAMOS UN AÑO A LA FECHA DE PROCESO PARA PROCESAR LOS ARRIENDOS DEL AÑO PASADO
    :b_fecha_proceso := ADD_MONTHS(TO_DATE(:b_fecha_proceso),-12); 

    
    -- TRUNCAMIENTO EN TIEMPO DE EJECUCIÓN
    EXECUTE IMMEDIATE 'TRUNCATE TABLE HIST_ARRIENDO_ANUAL_CAMION';
    COMMIT;

    FOR reg_c_camion IN C_CAMION 
    LOOP
        BEGIN
    
            -- CÁLCULOS
            
            reg_resumen.ANNO_PROCESO := TO_NUMBER(TO_CHAR(TO_DATE(:b_fecha_proceso),'YYYY'));
            reg_resumen.ID_CAMION := reg_c_camion.id_camion;
            reg_resumen.NRO_PATENTE := reg_c_camion.nro_patente;
            reg_resumen.VALOR_ARRIENDO_DIA := reg_c_camion.VALOR_ARRIENDO_DIA;
            reg_resumen.VALOR_GARACTIA_DIA := reg_c_camion.VALOR_GARANTIA_DIA;
    
            
            -- CALCULAR EL TOTAL DE ARRIENDOS
            BEGIN
                v_sql := 'SELECT COUNT(ID_ARRIENDO)
                FROM ARRIENDO_CAMION
                WHERE TO_CHAR(FECHA_INI_ARRIENDO, ''YYYY'') = TO_CHAR(:1,''YYYY'') AND ID_CAMION = :2
                GROUP BY id_camion';
                
                EXECUTE IMMEDIATE v_sql 
                INTO REG_RESUMEN.TOTAL_VECES_ARRENDADO
                USING TO_DATE(:b_fecha_proceso), reg_resumen.ID_CAMION;
                
                
            EXCEPTION
                WHEN OTHERS THEN
                    DBMS_OUTPUT.PUT_LINE('No se han solicitado arriendos para este camión.');
                    reg_resumen.TOTAL_VECES_ARRENDADO:= 0;
            END;
            
            -- SÓLO CONSIDERAMOS LOS CAMIONES QUE FUERON ARRENDADOS MENOS DE 4 VECES AL AÑO
            IF reg_resumen.TOTAL_VECES_ARRENDADO < 4 THEN
                
                -- CÁCULOS DE CAMIÓN
                DBMS_OUTPUT.PUT_LINE('aaaaaaaaa' );
                v_pct_arriendo := v_pct_arriendo / 100;   
                v_arreglo_valor(1) := REG_RESUMEN.VALOR_ARRIENDO_DIA - round(REG_RESUMEN.VALOR_ARRIENDO_DIA * v_pct_arriendo,0);
                v_arreglo_valor(2) := REG_RESUMEN.VALOR_GARACTIA_DIA - ROUND(REG_RESUMEN.VALOR_GARACTIA_DIA * v_pct_arriendo,0);
  
                -- ACTUALIZAR LA TABLA CAMIÓN
            
                UPDATE CAMION_BK SET VALOR_ARRIENDO_DIA = v_arreglo_valor(1), VALOR_GARANTIA_DIA = v_arreglo_valor(2) 
                WHERE ID_CAMION = reg_resumen.ID_CAMION;
                
            END IF;
            
            -- OBJETIVO
            
            -- INSERTAR EN LA TABLA HISTORIAL
            INSERT INTO HIST_ARRIENDO_ANUAL_CAMION VALUES REG_RESUMEN;
            
             
            COMMIT;
            
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('Error en el cursor' || SQLERRM);
        END;
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error en el bloque PLSQL' || SQLERRM);
END;
/

SELECT * FROM CAMION_BK;



